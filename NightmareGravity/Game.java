import greenfoot.*;import java.util.List;import java.awt.Color;import javax.swing.JOptionPane;/** * World où presque l'intégralité du jeu se déroule. */public class Game extends TheEdge{    /**     * Retourne si la partie est terminée ou pas     */    public static boolean end;    public static Buttons button1 = new Buttons();    public static Buttons button2 = new Buttons();    public static Buttons button3 = new Buttons();    /**     * Boutons du menu "pause"     */    public static Buttons[] buttonss = {button1,button2,button3};    /**     * Compteur utile à presque toutes les actions sur cette scène     */    public static int Counter;    /**     * Variable retournant si des objets de la classe Device peuvent être créés ou pas     */    public static boolean ready = false;    /**     * compteur utilisé par les objets de la classe Device     */    public static int aimingCounter;    /**     * Temps en secondes     */    public static int time;    /**     * Nombre d'ennemis tués     */    public static int killedEnemies;    /**     * Retourne si un boss a été créé ou pas     */    public static boolean bossCreated;    /**     * Variable contenant la valeur 1 si un boss est actuellement dans le monde     */    public static int bossSpawned;    /**     * Variable contenant les crédits gagnés pendant la partie     */    public static int credit;    /**     * Variable contenant le niveau actuel     */    public static int Level;    /**     * Musique du jeu     */    public static GreenfootSound gameMusic = new GreenfootSound("Intro.wav");    /**     * Tous les titres des musiques de jeu     */    String[] musics = {"Intro.wav", "test.AIF", "lvl2.wav", "lvl3.wav",            "lvl4.wav", "lvl5.wav", "lvl2.wav", "lvl3.wav", "lvl4.wav", "lvl5.wav"};    /**     * Variable contenant la lettre assignée à la compétence ShieldIcon     */    public static String shieldIconLetter = ShieldIcon.letter;    /**     * Largeur de l'image du menu Pause     */    public int widthImage = (new Pause()).getImage().getWidth();    /**     * Hauteur de l'image du menu Pause     */    public int heightImage = (new Pause()).getImage().getWidth();    /**     * Nombre de vies à disposition pour le labyrinthe     */    public static int lives = 1;    /**     * Compteur ponctuant la création des boss     */    public static int bossCounter;    /**     * Variable contenant la position de l'image d'arrière-plan défilante     */    private int xPosition = 0;    /**     * Seconde variable contenant la position de l'image d'arrière-plan qui succède à celle d'avant     */    private int xPosition2 = 0;    Level level = new Level();    Pause pause = new Pause();    /**     * Tableau d'images d'arrière-plan variant avec les niveaux     */    GreenfootImage[] silks = {            new GreenfootImage("SilkGround1.png"),            new GreenfootImage("SilkGround2.png"),            new GreenfootImage("SilkGround3.png"),            new GreenfootImage("SilkGround4.png"),            new GreenfootImage("SilkGround5.png"),            new GreenfootImage("SilkGround6.png"),            new GreenfootImage("SilkGround7.png"),            new GreenfootImage("SilkGround8.png"),            new GreenfootImage("SilkGround9.png"),        };    /**     * Image affichant la première partie de l'arrière-plan     */    GreenfootImage setter = new GreenfootImage(750, 563);    /**     * Image affichant la deuxième partie de l'arrière-plan     */    GreenfootImage setter2 = new GreenfootImage(750, 563);    /**     * Pseudo affiché au-dessus du vaisseau     */    Pseudo pseudo = new Pseudo();    /**     * Vitesse de défilement de l'arrière-plan     */    public static int speed;    /**     * True si le défilement de l'arrière-plan décélère     */    public static boolean reduce;    /**     * Variable contenant le numéro d'image d'arrière-plan à afficher     */    public static int imageNumber = 0;    /**     * Le nombre de Nightmares réussis     */    public static int completedNightmares;    /**     * Le nombre de compétences utilisées (influence le score)     */    public static int usedAbilities;    /**     * Définit l'ordre de chevauchement des acteurs, initialise des variable et ajouter le vaisseau du joueur au monde     */    public Game()    {        usedAbilities = 0;        completedNightmares = 0;        end = false;        speed = 2;        imageNumber = 0;        gear();        board();        time = 0;        credit = 0;        killedEnemies = 0;        bossCreated = false;        Counter = 0;        Level = 0;        drawDeck();        addObject(new Credit(30), 400, 300);        setBackground(silks[0]);        setActOrder(Boss8.class, VellocatusHigh.class, VellocatusLow.class);        setPaintOrder(Transition.class, Buttons.class, Volume.class,            Pause.class, Informations2.class, PressEnter.class, D3.class, Level.class, Pseudo.class, Point.class,            Health.class, Energy.class, Board.class, Shadow.class, Gears.class, Image.class, Robot.class, Gray.class,            Shoots.class, Bosses.class, Focus.class, Enemies.class);        addObject(level, getWidth()/2, getHeight()/20);        lives = 10;        bossCounter = 0;        addObject(pseudo, 0, 0);        reduce = false;        addObject(new Robot(), 650, 500);        Gear4.power = 0;    }    /**     * Retourne si le jeu est en pause ou en exécution     */    private boolean isPaused()    {        List<Pause> pause = getObjects(Pause.class);        int length = pause.size();        if (length==1)        {            return true;        }        return false;    }    /**     * Change la musique du jeu au passage à un autre niveau     */    public void changeMusic(String string)    {        if(bossCounter == 99) gameMusic.stop();        else if(bossCounter == 100)         {            gameMusic = new GreenfootSound(string);            gameMusic.playLoop();        }    }    /**     * Gère essentiellement l'apparition des ennemis et le son.     */    public void act()    {        ChangeMouseImage(img1, 1, 1);        switch(Level)        {            case 0: gameMusic.play(); break;            case 1: changeMusic(musics[1]); break;            case 2: changeMusic(musics[2]); break;            case 3: changeMusic(musics[3]); break;            case 4: changeMusic(musics[4]); break;            case 5: changeMusic(musics[5]); break;            case 6: changeMusic(musics[6]); break;            case 7: changeMusic(musics[7]); break;            case 8: changeMusic(musics[8]); break;            case 9: changeMusic(musics[9]); break;        }        if(Volume.volumeOn == false)        {            gameMusic.setVolume(0);        }        try        {            if(getObjects(Screenshot.class).isEmpty())            {                List<Bosses> boss = getObjects(Bosses.class);                bossSpawned = boss.size();                if(bossSpawned == 0 && getObjects(Transition.class).isEmpty() &&                getObjects(Boss8Stuff.class).isEmpty() && Level < 10)                {                    createTraps();                    if(Level<4) createMonsters();                    if(Level>3) createDevices();                    if(Level>5) createPredators();                    if(Level>2) createSeekers();                    if(Level>4) createStunners();                    if(Level>1) createRaptors();                    if(Level>6) createReflectors();                    if(Level>6) createStunners();                    if(Level>6) createStunners();                    if(Level>7) createSeekers();                    if(Level>8) createPredators();                }                Options();                changeGround();                field();                if(isPaused() == false && getObjects(Informations2.class).isEmpty())                {                    Counter++;                    if(Counter == 60)                    {                        Level++;                    }                    bossCounter++;                }                beReady();                aim();                deleteLaser();                timer();                drawTimer();                createBosses();                drawCrediter();                animateWorld();                slowUp();            }        }catch(IndexOutOfBoundsException e){}    }    /**     * Méthode faisant accélérer le défilement de l'arrière-plan     */    public void speedUp()    {        if(!getObjects(Transition.class).isEmpty())        {            speed++;        }    }    /**     * Méthode faisant décélérer le défilement de l'arrière-plan     */    public void slowUp()    {        if(reduce == true && speed>1)        {            speed--;        }        else if(reduce == true && speed == 1)        {            reduce = false;        }    }    /**     * Méthode faisant défiler l'arrière-plan     */    public void animateWorld()    {        if(isPaused() == false && getObjects(Screenshot.class).isEmpty())        {            xPosition -= speed;            if(xPosition<0 && xPosition>= -750)            {                setter.drawImage(silks[imageNumber], xPosition, 0);                setBackground(setter);            }            else if(xPosition<-750 && xPosition >= -1500)            {                setter.drawImage(silks[imageNumber], xPosition, 0);                setter.drawImage(silks[imageNumber], 1500+xPosition, 0);                setBackground(setter);            }            else if(xPosition<-1500)            {                xPosition = 0;            }            speedUp();        }    }    /**     * Ajoute le vaisseau sélectionné par le joueur à la scène     */    public void gear()    {        switch(RightArrow.imageNumber)        {            case 0:            Gear1 gear1 = new Gear1(new Vector(0, 0.0));            addObject(gear1, getBackground().getWidth()/6, getBackground().getHeight()/2);            break;            case 1:            Gear2 gear2 = new Gear2(new Vector(0, 0.0));            addObject(gear2, getBackground().getWidth()/6, getBackground().getHeight()/2);            break;            case 2:            Gear3 gear3 = new Gear3(new Vector(0, 0.0));            addObject(gear3, getBackground().getWidth()/6, getBackground().getHeight()/2);            break;            case 3:            Gear4 gear4 = new Gear4(new Vector(0, 0.0));            addObject(gear4, getBackground().getWidth()/6, getBackground().getHeight()/2);            addObject(new Shadow(), gear4.getX(), gear4.getY());            break;        }    }    /**     * Crée des monstres périodiquement     */    public void createMonsters()    {        if(Counter % (80+30*Level) == 0)        {            Monsters monster = new Monsters();            addObject(monster, getBackground().getWidth(),                80+Greenfoot.getRandomNumber(getBackground().getHeight()-160));        }    }    /**     * Crée des acteurs de cette classe d'ennemis périodiquement     */    public void createReflectors()    {        if(Counter % 500 == 25)        {            Reflector reflector = new Reflector();            addObject(reflector, getBackground().getWidth(),                80+Greenfoot.getRandomNumber(getBackground().getHeight()-160));        }    }    /**     * Crée des trous noris     */    public void createTraps()    {        if(Counter % (3000-290*Level) == 0)        {            addObject(new Trap(), getBackground().getWidth()-10, getBackground().getHeight()*1/2);        }    }    /**     * Crée des acteurs de cette classe d'ennemis périodiquement     */    public void createRaptors()    {        if(Counter % (400-10*Level) == 32)        {            Raptor raptor = new Raptor();            addObject(raptor, getBackground().getWidth(),                100+Greenfoot.getRandomNumber(getBackground().getHeight()-200));        }    }    /**     * Crée des acteurs de cette classe d'ennemis périodiquement     */    public void createStunners()    {        if(Counter % (500-10*Level) == 42)        {            Stunner stunner = new Stunner();            addObject(stunner, getBackground().getWidth(),                100+Greenfoot.getRandomNumber(getBackground().getHeight()-200));        }    }    /**     * Crée des acteurs de cette classe d'ennemis périodiquement     */    public void createPredators()    {        if(Counter%(500-20*Level) == 12)        {            Predator predator = new Predator();            addObject(predator, getBackground().getWidth()/2,                100+Greenfoot.getRandomNumber(getBackground().getHeight()-200));        }    }    /**     * Crée des acteurs de cette classe d'ennemis périodiquement     */    public void createDevices()    {        if(Counter % 250 == 0 && ready == false)        {            Devices device = new Devices();            addObject(device, getBackground().getWidth(),                100+Greenfoot.getRandomNumber(getBackground().getHeight()-200));        }    }    /**     * Crée des acteurs de cette classe d'ennemis périodiquement     */    public void createSeekers()    {        if(Counter % 500 == 36)        {            Seeker seeker = new Seeker();            addObject(seeker, getBackground().getWidth(),                100+Greenfoot.getRandomNumber(getBackground().getHeight()-200));        }    }    /**     * Affiche le menu Pause et arrête la partie     */    public void Options()    {        if(Greenfoot.isKeyDown("P"))        {            addObject(pause, getWidth()/2, getHeight()/2);            for(int i=0; i<3; i++)            {                addObject(buttonss[i],getWidth()/2,getHeight()/2-heightImage/2+heightImage*3/10+20+70*i);            }            List<Weapon1> weapon1 = getObjects(Weapon1.class);            removeObjects(weapon1);            if(getObjects(Volume.class).isEmpty())            {                addObject(volumeObject, getWidth()/2, getHeight()/2+140);            }        }    }    /**     * Options proposées par le menu Pause     */    public void changeGround()    {        if(Greenfoot.mouseClicked(button1) || (Greenfoot.isKeyDown("O")))        {            List<Buttons> buttons = getObjects(Buttons.class);            removeObjects(buttons);            removeObject(pause);            removeObject(volumeObject);        }        if(Greenfoot.mouseClicked(button2))        {            int answer = JOptionPane.showConfirmDialog(null, "Are you sure you want to restart? All your progress will be lost", "Warning", JOptionPane.YES_NO_OPTION);            if(answer == JOptionPane.YES_OPTION){System.gc(); gameMusic.stop(); Greenfoot.setWorld(new Game());}        }        if(Greenfoot.mouseClicked(button3))        {            int answer = JOptionPane.showConfirmDialog(null, "Are you sure you want to leave? All your progress will be lost", "Warning", JOptionPane.YES_NO_OPTION);            if(answer == JOptionPane.YES_OPTION){Greenfoot.setWorld(new Menu()); System.gc();}        }    }    /**     * Objet affiché en haut à gauche de l'écran et indiquant la barre de vie et d'énergie     */    public void board()    {        Board board = new Board();        addObject(board, board.getImage().getWidth()/2, board.getImage().getHeight()/2);    }    /**     * Crée les barres de vie et d'énergie     */    public void field()    {        List<Health> healthbars = getObjects(Health.class);        removeObjects(healthbars);        Health health = new Health();        addObject(health, 125, 20);        List<Energy> energies = getObjects(Energy.class);        removeObjects(energies);        Energy energy = new Energy();        addObject(energy, 125, 50);    }    /**     * Séquence le laser des acteurs de la classe Device     */    public void beReady()    {        if(Game.Counter % 500 == 0)        {            ready = true;            aimingCounter = 0;        }    }    /**     * Méthode permettant aux objets de la classe Devices de créer des lasers ciblant le joueur     */    public void aim()    {        if(isPaused() == false)        {            aimingCounter++;        }        if(ready == true && aimingCounter<100)        {            List<DeviceLaser> lasers = getObjects(DeviceLaser.class);            removeObjects(lasers);            List<Devices> devices = getObjects(Devices.class);            try            {                Actor gears = (Actor)getObjects(Gears.class).get(0);                int xGear = gears.getX();                int yGear = gears.getY();                for(Devices device: devices)                {                    int xDevice = device.getX();                    int yDevice = device.getY();                    int dx = xGear-xDevice;                    int dy = yGear-yDevice;                    double length = Math.sqrt(dx*dx+dy*dy);                    double xLength = dx/length;                    double yLength = dy/length;                    for(int i=0; i<(length+1000); i++)                    {                        DeviceLaser devicelaser = new DeviceLaser();                        if(i%3==0)                        {                            addObject(devicelaser, (int)(device.getX()+i*xLength),                                (int)(device.getExactY()+i*yLength));                        }                    }                }            }catch(IndexOutOfBoundsException e){}        }    }    /**     * Supprime tous les lasers de la scène après un certain moment     */    public void deleteLaser()    {        if(aimingCounter>=170)        {            List<DeviceLaser> lasers = getObjects(DeviceLaser.class);            removeObjects(lasers);            ready = false;        }    }    /**     * Temps en secondes du jeu     */    public void timer()    {        if(Counter % 60 == 0)        {            time++;        }        if(Counter<180 && Counter%15 == 0)        {            Gears gear = (Gears) getObjects(Gears.class).get(0);            addObject(new Image(), gear.getX(), gear.getY());         }    }    /**     * Affiche le temps du jeu en secondes     */    public void drawTimer()    {        List<Timer> timers = getObjects(Timer.class);        removeObjects(timers);        Timer timer = new Timer();        addObject(timer, getWidth()*11/12, getHeight()/20);    }    /**     * Affiche le montant de crédits gagnés au courant de la partie     */    public void drawCrediter()    {        List<Crediter> crediters = getObjects(Crediter.class);        removeObjects(crediters);        Crediter crediter = new Crediter();        addObject(crediter, getWidth()*9/12, getHeight()/20);    }    /**     * Méthode créant tous les boss du jeu     */    public void createBosses()    {        if (bossCreated) return;        if (bossCounter == 1500+180*Level)        {            Actor boss = null;            List<Trap> traps = getObjects(Trap.class);            removeObjects(traps);            switch(Level)            {                case 1 : boss = new Boss1(); break;                case 2 : boss = new Boss2(); break;                case 3 : boss = new Boss3(); break;                case 4 : boss = new Boss4(); break;                case 5 : boss = new Boss5(); break;                case 6 : boss = new Boss6(); break;                case 7 : boss = new Boss7(); break;                case 8 : boss = new Boss8(); break;                case 9 : boss = new Boss9(); break;            }            addObject(boss, getWidth(), getHeight()/2);            String[] infos = new String[]                {                    "Hi Captain! I am R-Bot, your faithful partner! Throughout the mission. I'll give you some precious advices on how to face each Boss. This is the Quetzalcoatl, avoid its bullets and above all, don't go too close to him. By the way, don't go too close to any of the next Bosses ",                    "This is the Gryphon! Again, all you have to do is to dodge his bullets. However, these ones deal much more damage than earlier. ",                    "Oh no! Not this one! Captain, you'll have to concentrate as much as you can. This monster will create dark-energy circles, colliding with them or shooting them will severely damage your ship. Wait the right moment to shoot him without touching anything else! Good luck, you'll need it. ",                    "Care Captain, the Rift's King uses space rifts as a weapon... Naturally, AVOID them! Oh, and don't attack him if there are some hives in the map, they'll try to protect him anyway. Good Luck and don't forget, THE HIVES FIRST ",                    "Oh god, this is a tough one. Be careful, you'll have to overheat the asteroids by damaging them. Then, stay close enough to one of them to capture it. They are your only protection so... HURRY UP! He will perdiodically unleash a heatwave and each captured asteroïd will reduce the damage... Oh and I fogot to tell you, your weapons are until you've captured 6 asteroids. ",                    "Well, this one is made of Super-Steelium, which means... let's just go back. Kidding. You'll have to rely on me bro. Try damaging his vulnerable magnets to disturb his systems. I'll mark them for you. Good Luck! Don't shoot anything else, or you'll quickly lose all your health points! ",                    "Seems we have got company Captain. We've got so far, just keep listening to my instructions: He will create mines and you'll have to dodge them. How? Swap your and the boss' places by clicking on him. If you're quick enough, he'll soon fall in his own trap. See you! ",                    "Here we go again. This is the Vellocatus-Guardian. I warn you..., it'll be HARD. You'll have to play plassive and wait him open his wings (his protections). When he does, don't hesitate and shoot him! If you succeed in destroying him, his front part may survive. Let me give you a little tip: It's only vulnerable when it's creating the lightning, otherwise it'll escape! ",                    "You are amazing Captain! Hope this is the last one: The Ultimate Guardian. Prepare yourself to dodge a rain of bullets. Oh and there's something special with him... You can only damage him by... hmmm... You'll have to find out by yourself! Afterwards, you'll face a last enemy: Try damaging its black holes to...th..th..row...them...on..him. My systems are dete..rio..rating...! "                };            informate(infos[Level-1]);            addObject(new PressEnter(), getWidth()/2, 460);            removeObjects(getObjects(Weapon1.class));            bossCreated = true;        }    }    /**     * Méthode affichant du texte qui indique au joueur comment affronter le Boss.     */    public void informate(String text)    {        addObject(new Informations2(text), getWidth()/2, getHeight()/2);        Gears gear = (Gears) getObjects(Gears.class).get(0);        addObject(new Halo(), gear.getX(), gear.getY());    }    /**     * Affiche les objets équipés par le joueur en bas au milieu de l'écran     */    public void drawDeck()    {        addObject(new ItemDeck(), getWidth()/2, 515);        if(ShieldIcon.used == true)        {            ShieldIcon icon = new ShieldIcon(0);            addObject(icon, 0,0);            ItemDeck deck = (ItemDeck) getObjects(ItemDeck.class).get(0);            icon.setImage(ShieldIcon.image2);            icon.setLocation(deck.getX()+25-(ItemDeck.number*ItemDeck.side)/2+50*ShieldIcon.n, deck.getY());            usedAbilities++;        }        if(SpeedIcon.used == true)        {            SpeedIcon icon = new SpeedIcon(0);            addObject(icon, 0,0);            ItemDeck deck = (ItemDeck) getObjects(ItemDeck.class).get(0);            icon.setImage(SpeedIcon.image2);            icon.setLocation(deck.getX()+25-(ItemDeck.number*ItemDeck.side)/2+50*SpeedIcon.n, deck.getY());            usedAbilities++;        }        if(RegenIcon.used == true)        {            RegenIcon icon = new RegenIcon(0);            addObject(icon, 0,0);            ItemDeck deck = (ItemDeck) getObjects(ItemDeck.class).get(0);            icon.setImage(RegenIcon.image2);            icon.setLocation(deck.getX()+25-(ItemDeck.number*ItemDeck.side)/2+50*RegenIcon.n, deck.getY());            usedAbilities++;        }        if(CreditIcon.used == true)        {            CreditIcon icon = new CreditIcon(0);            addObject(icon, 0,0);            ItemDeck deck = (ItemDeck) getObjects(ItemDeck.class).get(0);            icon.setImage(CreditIcon.image2);            icon.setLocation(deck.getX()+25-(ItemDeck.number*ItemDeck.side)/2+50*CreditIcon.n, deck.getY());            usedAbilities++;        }        if(CollectIcon.used == true)        {            CollectIcon icon = new CollectIcon(0);            addObject(icon, 0,0);            ItemDeck deck = (ItemDeck) getObjects(ItemDeck.class).get(0);            icon.setImage(CollectIcon.image2);            icon.setLocation(deck.getX()+25-(ItemDeck.number*ItemDeck.side)/2+50*CollectIcon.n, deck.getY());            usedAbilities++;        }    }}